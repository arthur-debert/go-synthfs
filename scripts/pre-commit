#!/usr/bin/env bash

set -e

# Get the directory where this script is actually located (resolve symlinks)
SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}" 2>/dev/null || realpath "${BASH_SOURCE[0]}" 2>/dev/null || echo "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Function to install the pre-commit hook
install_hook() {
    local git_hooks_dir="$PROJECT_ROOT/.git/hooks"
    local hook_file="$git_hooks_dir/pre-commit"

    if [ ! -d "$git_hooks_dir" ]; then
        echo "Error: .git/hooks directory not found. Are you in a git repository?"
        exit 1
    fi

    if [ -f "$hook_file" ]; then
        echo "Pre-commit hook already exists. Backing up to pre-commit.backup"
        mv "$hook_file" "$hook_file.backup"
    fi

    # Create a symlink to this script
    ln -s "$SCRIPT_DIR/pre-commit" "$hook_file"
    chmod +x "$hook_file"

    echo "✅ Pre-commit hook installed successfully!"
    echo "The hook will run linting and tests before each commit."
}

# Function to uninstall the pre-commit hook
uninstall_hook() {
    local git_hooks_dir="$PROJECT_ROOT/.git/hooks"
    local hook_file="$git_hooks_dir/pre-commit"
    local backup_file="$hook_file.backup"

    if [ ! -f "$hook_file" ]; then
        echo "No pre-commit hook found to uninstall."
        return 0
    fi

    # Remove the hook
    rm "$hook_file"

    # Restore backup if it exists
    if [ -f "$backup_file" ]; then
        mv "$backup_file" "$hook_file"
        echo "✅ Pre-commit hook uninstalled and backup restored."
    else
        echo "✅ Pre-commit hook uninstalled."
    fi
}

# Function to run the actual pre-commit checks
run_checks() {
    echo "\U0001F50D Running pre-commit checks..."

    # Set PROJECT_ROOT for the lint and test scripts
    export PROJECT_ROOT

    # Run linting and capture result
    "${PROJECT_ROOT}"/scripts/lint
    LINT_STATUS=$?

    # Always run tests regardless of lint status
    "${PROJECT_ROOT}"/scripts/test
    TEST_STATUS=$?

    # Check if either failed
    if [ $LINT_STATUS -ne 0 ] || [ $TEST_STATUS -ne 0 ]; then
        echo "❌ Pre-commit checks failed!"
        exit 1
    fi

    echo "✅ All pre-commit checks passed!"
}

# Main script logic
case "${1:-}" in
"install")
    install_hook
    ;;
"uninstall")
    uninstall_hook
    ;;
"")
    # No arguments - run the checks (this is the actual hook behavior)
    run_checks
    ;;
*)
    echo "Usage: $0 [install|uninstall]"
    echo ""
    echo "Commands:"
    echo "  install    Install the pre-commit git hook"
    echo "  uninstall  Uninstall the pre-commit git hook"
    echo "  (no args)  Run pre-commit checks (used by git hook)"
    exit 1
    ;;
esac
