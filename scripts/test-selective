#!/bin/bash

# Alternative approach: Use -coverpkg to specify which packages to include
# This excludes testutil and other unwanted packages by not mentioning them

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Running tests with selective coverage (excluding testutil)...${NC}"

# Define packages to include in coverage
COVER_PKGS="github.com/arthur-debert/synthfs/cmd/synthfs,github.com/arthur-debert/synthfs/pkg/synthfs"

# Run tests with selective coverage
gotestsum --format pkgname -- -coverpkg="$COVER_PKGS" -coverprofile=coverage.out ./...

# Generate coverage report
echo -e "${BLUE}Generating coverage report...${NC}"
go tool cover -func=coverage.out | awk '
function color_line(line, coverage_val) {
    if (coverage_val >= 80) {
        printf "\033[32m%s\033[0m\n", line;  # Green
    } else if (coverage_val >= 60) {
        printf "\033[33m%s\033[0m\n", line;  # Yellow
    } else {
        printf "\033[31m%s\033[0m\n", line;  # Red
    }
}
BEGIN { 
    header = "";
    total_line = "";
    count = 0;
}
{
    if (NR == 1) {
        header = $0;
    } else if ($1 == "total:") {
        total_line = $0;
    } else {
        lines[count] = $0;
        coverage = $NF;
        sub(/%/, "", coverage);
        coverage_vals[count] = coverage + 0;
        count++;
    }
}
END {
    print header;
    
    for (i = 0; i < count-1; i++) {
        for (j = 0; j < count-1-i; j++) {
            if (coverage_vals[j] < coverage_vals[j+1]) {
                temp_line = lines[j];
                lines[j] = lines[j+1];
                lines[j+1] = temp_line;
                temp_cov = coverage_vals[j];
                coverage_vals[j] = coverage_vals[j+1];
                coverage_vals[j+1] = temp_cov;
            }
        }
    }
    
    for (i = 0; i < count; i++) {
        color_line(lines[i], coverage_vals[i]);
    }
    
    if (total_line != "") {
        print "";
        split(total_line, fields);
        total_coverage = fields[length(fields)];
        sub(/%/, "", total_coverage);
        total_coverage = total_coverage + 0;
        gsub(/^total:/, "TOTAL:", total_line);
        color_line(total_line, total_coverage);
    }
}' 